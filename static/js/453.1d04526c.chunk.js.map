{"version":3,"file":"static/js/453.1d04526c.chunk.js","mappings":"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","sources":["components/Animate/Animate.tsx","components/Modal/Modal.tsx","components/TableComponent/components/TableBody.tsx","components/TableComponent/components/TableHead.tsx","components/TableComponent/components/TableInfo.tsx","components/TableComponent/TableComponent.tsx","configs/apiConfigs.ts","configs/constants.ts","apis/questionApis.ts","components/Form/Form.tsx","data/validationSchemas.ts","views/Questions/CreateQuestion.tsx","views/Questions/Actions/DeleteQuestionAction.tsx","views/Questions/Questions.tsx","views/Questions/index.ts"],"sourcesContent":["import { useEffect, useState, PropsWithChildren } from \"react\";\r\n\r\ntype Props = {\r\n  show: boolean;\r\n  animateIn?: string;\r\n  animateOut?: string;\r\n}\r\n\r\nexport const Animate = ({ show, children, animateIn = \"fadeIn\", animateOut = \"fadeOut\" }: PropsWithChildren<Props>) => {\r\n  const [render, setRender] = useState(false);\r\n\r\n  useEffect(() => {\r\n    show && setRender(show);\r\n  }, [show]);\r\n\r\n  const handleAnimationEnd = () => {\r\n    !show && setRender(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {render && (\r\n        <div className={!show ? animateOut : animateIn} onAnimationEnd={handleAnimationEnd}>\r\n          {children}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};","import React from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { ModalProps } from \"./models\";\r\n\r\nexport const ModalComponent = ({\r\n  isOpen,\r\n  content,\r\n  title,\r\n  footerButtons,\r\n  toggle,\r\n  size = \"md\",\r\n  centered = false\r\n}: ModalProps) => {\r\n  return (\r\n    <div>\r\n      <Modal\r\n        {...{ isOpen, toggle, size, centered }}\r\n        keyboard\r\n        unmountOnClose\r\n        >\r\n        {\r\n          title && (\r\n            <ModalHeader toggle={toggle}>{title}</ModalHeader>\r\n          )\r\n        }\r\n\r\n        <ModalBody>\r\n          {content}\r\n        </ModalBody>\r\n\r\n        {\r\n          footerButtons && (\r\n            <ModalFooter>\r\n              {\r\n                footerButtons?.map((button) => (\r\n                  <Button {...button}>\r\n                    {button.text}\r\n                  </Button>\r\n                ))\r\n              }\r\n            </ModalFooter>\r\n          )\r\n        }\r\n      </Modal>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport { TableProps } from \"../models\";\r\n\r\n// Component for rendering the table body\r\nexport const TableBody = ({ data, columns, templates }: TableProps) => {\r\n  return (\r\n    <tbody>\r\n      {data.map((tdata, index) => {\r\n        const columnKeys = columns.map((column) => column.accessor);\r\n\r\n        return (\r\n          <tr key={index} className=\"border-top\">\r\n            {columnKeys.map((column, tdIndex) => {\r\n\r\n              return (\r\n                <td\r\n                  key={`${tdIndex}-${column}`} className=\"align-middle\"\r\n                  style={{\r\n                    width: columns[tdIndex].width,\r\n                    minWidth : columns[tdIndex].minWidth || \"auto\",\r\n                    maxWidth : columns[tdIndex].maxWidth || \"auto\",\r\n                    textAlign: columns[tdIndex].align || \"left\",\r\n                    ...columns[tdIndex].grow ? { flexGrow: 1 } : {},\r\n                  }}>\r\n                  {\r\n                    // Render the cell content or template,Even empty, if it is available in the columns list\r\n                    (tdata[column] || templates?.[column]) ? (\r\n                      templates?.[column]?.({ ...tdata, index }) || tdata[column]\r\n                    ) : null\r\n                  }\r\n                </td>\r\n              )\r\n            })}\r\n          </tr>\r\n        )\r\n      })}\r\n    </tbody>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport { Column } from \"../models\"\r\n\r\n// Component for rendering the table head\r\nexport const TableHead = ({ columns }: { columns: Column[] }) => {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {columns.map((column, index) => (\r\n          <th\r\n            style={{\r\n              width: column.width || \"auto\",\r\n              textAlign : column.align || \"left\",\r\n              ...column.grow ? { flexGrow: 1 } : {},\r\n            }}\r\n            key={`${index}-${column.accessor}`}\r\n            className=\"border-0 font-medium\">\r\n            {column.Header}\r\n          </th>\r\n        ))}\r\n      </tr>\r\n    </thead>\r\n  )\r\n}","import React from \"react\";\r\nimport { CardSubtitle, CardTitle } from \"reactstrap\"\r\nimport { Info } from \"../models\"\r\n\r\nexport const TableInfo = ({ title, subtitle }: Info) => {\r\n  return (\r\n    <>\r\n      {title && <CardTitle tag=\"h5\">{title}</CardTitle>}\r\n      {\r\n        subtitle && (\r\n          <CardSubtitle className=\"mb-2 text-muted\" style={{fontSize : '0.9rem'}} tag=\"p\">{subtitle}</CardSubtitle>\r\n        )\r\n      }\r\n    </>\r\n  )\r\n}","import { STATIC_CONTENT } from \"configs/constants\";\r\nimport React, { ReactNode } from \"react\";\r\nimport { Card, CardBody, Spinner, Table } from \"reactstrap\";\r\nimport { TableBody, TableHead, TableInfo } from \"./components\";\r\nimport { TableProps } from \"./models\";\r\n\r\nconst TableLoader = () => {\r\n  return (\r\n    <div className=\"d-flex justify-content-center align-items-center\">\r\n      <Spinner color=\"secondary\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EmptyMessage = ({ message }: { message: ReactNode }) => {\r\n  return (\r\n    <div className=\"d-flex justify-content-center align-items-center\">\r\n      <h5>{message}</h5>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const TableComponent = ({ columns, data, templates, configs, loading, rowHover = true }: TableProps) => {\r\n  const isInfoAvailable = configs?.title || configs?.subtitle;\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardBody>\r\n          <TableInfo title={configs?.title || \"\"} subtitle={configs?.subtitle || \"\"} />\r\n\r\n          <Table className={`no-wrap ${isInfoAvailable ? `mt-3` : `mb-0`} align-middle`} responsive borderless hover={rowHover} >\r\n\r\n            {!loading ? (\r\n              <>\r\n                <TableHead columns={columns} />\r\n                {\r\n                  // Render the table body only if the data is available\r\n                  data?.length > 0 && (\r\n                    <TableBody {...{ data, columns, templates, loading }} />\r\n                  )\r\n                }\r\n              </>\r\n            ) : <TableLoader />}\r\n\r\n          </Table>\r\n\r\n        </CardBody>\r\n      </Card>\r\n\r\n      {\r\n        data.length === 0 && !loading && (\r\n          <EmptyMessage message={configs?.noDataMessage} />\r\n        )\r\n      }\r\n    </>\r\n\r\n  );\r\n};\r\n\r\nexport default TableComponent;\r\n","\r\n// Function to build the API URL\r\nexport const createAPIUrl = (endpoint: string) => {\r\n  return `${process.env.REACT_APP_API_DOMAIN}${endpoint}`;\r\n}","export const ROUTE_BASENAME = '/editor-admin';\r\n\r\nexport const STATIC_CONTENT = {\r\n  all_questions : \"All Questions\",\r\n  confirm : \"Confirm\",\r\n  create_question : \"Create Question\",\r\n  create_new_question : \"Create New Question\",\r\n  no_questions : \"No Questions\",\r\n  submitted_code : \"Submitted Code\",\r\n  question_created : \"Question created\",\r\n}","import { Question } from \"views/Questions/models\";\r\nimport { createAPIUrl } from \"../configs/apiConfigs\";\r\nimport apiUrls from \"../configs/apiRoutes.json\";\r\n\r\nconst questionEndpoints = apiUrls.questions;\r\n\r\n/**\r\n * Get all questions\r\n * @returns - Promise of Question[]\r\n **/\r\nexport const getQuestions = async () => {\r\n  const getQuestionApi = createAPIUrl(questionEndpoints.getQuestions);\r\n  const response = await fetch(getQuestionApi);\r\n  return await response.json();\r\n}\r\n\r\n\r\n/**\r\n * Create a new question\r\n * @param params - Question object\r\n * @returns - Promise of Question object\r\n */\r\nexport const createQuestion = async ({\r\n  question,\r\n  description,\r\n  dueDate,\r\n  language,\r\n}: Question) => {\r\n  const createQuestionApi = createAPIUrl(questionEndpoints.createQuestion);\r\n  const response = await fetch(createQuestionApi, {\r\n    method: \"POST\",\r\n    body: JSON.stringify({ question, description, dueDate, language }),\r\n  });\r\n\r\n  return response.json();\r\n}\r\n\r\n\r\nexport const deleteQuestion = async (id: string) => {\r\n  const deleteQuestionApi = createAPIUrl(questionEndpoints.deleteQuestion);\r\n  const response = await fetch(`${deleteQuestionApi}?id=${id}`, {\r\n    method: \"DELETE\",\r\n  });\r\n\r\n  return response.json();\r\n}","import React, { ChangeEvent, ForwardedRef, forwardRef, useEffect, useImperativeHandle } from \"react\"\r\nimport { FormFeedback, FormGroup, Input, Label } from \"reactstrap\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { FormProps, FormRef, Option } from \"./model\";\r\n\r\nexport const Form = forwardRef(({\r\n  configs,\r\n  validationSchemas,\r\n  defaultValues,\r\n  onInputChange,\r\n  onValidationChange,\r\n}: FormProps, ref: ForwardedRef<FormRef>) => {\r\n\r\n  const { fields, id } = configs;\r\n  const formDefaultValues = defaultValues || fields.reduce((acc, input) => {\r\n    acc[input.name] = \"\";\r\n    return acc;\r\n  }, {} as { [key: string]: string });\r\n\r\n  const { formState: { errors, isValid }, control, getValues, handleSubmit, reset } = useForm({\r\n    mode: \"onChange\",\r\n    defaultValues: formDefaultValues\r\n  });\r\n\r\n  // Expose the events and values to the parent component\r\n  useImperativeHandle(ref, () => ({\r\n    getValues,\r\n    handleSubmit: (callback) => handleSubmit(callback)(),\r\n    reset\r\n  }), [getValues, handleSubmit]);\r\n\r\n  // Expose the validation state to the parent component\r\n  useEffect(() => {\r\n    onValidationChange?.(isValid);\r\n  }, [isValid]);\r\n\r\n  return (\r\n    <div id={id}>\r\n      {\r\n        fields.map(({ label, name, type, ...inputRest }: any) => {\r\n          return (\r\n            <FormGroup key={name}>\r\n              <Label for={name}>\r\n                {label} {\r\n                  validationSchemas[name]?.required ? (\r\n                    <span className=\"text-danger fw-bold\">*</span>\r\n                  ) : \"\"}</Label>\r\n              <Controller\r\n                name={name}\r\n                control={control}\r\n                rules={validationSchemas[name as keyof typeof validationSchemas]}\r\n                render={({ field: { ref, onChange, ...restControls } }) => {\r\n                  return (\r\n                    <Input\r\n                      id={name}\r\n                      innerRef={ref}\r\n                      type={type || \"text\"}\r\n                      invalid={!!errors[name]}\r\n                      valid={!!getValues()[name] && !errors[name]}\r\n                      onChange={(e: ChangeEvent<HTMLInputElement>) => {\r\n                        onChange(e);\r\n                        onInputChange?.(e);\r\n                      }}\r\n\r\n                      {...inputRest}\r\n                      {...restControls} >\r\n\r\n                      {\r\n                        type === \"select\" ? inputRest.options?.map((option: Option) => (\r\n                          <option key={option.id} value={`${option.id}`}>{option.label}</option>\r\n                        )) : null\r\n                      }\r\n                    </Input>\r\n                  )\r\n                }}\r\n              />\r\n              <FormFeedback>\r\n                {`${errors[name]?.message}`}\r\n              </FormFeedback>\r\n            </FormGroup>\r\n          )\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default Form","export const CreateQuestionSchema = {\r\n  question: {\r\n    required: \"You forgot to add a question\",\r\n  },\r\n  description: {},\r\n  dueDate : {\r\n    required: \"You forgot to add a due date\",\r\n  },\r\n  language: {\r\n    required: \"You forgot to add a default language\",\r\n  },\r\n}","import React, { useRef, useState } from \"react\";\r\nimport { Alert, Button } from \"reactstrap\";\r\n\r\nimport produce from \"immer\";\r\n\r\nimport languages from \"data/languageOptions.json\";\r\nimport { CreateQuestionSchema } from \"data/validationSchemas\";\r\nimport createQuestionForm from \"data/createQuestionForm.json\";\r\nimport { Form, FormRef, Field } from \"components\";\r\nimport { Question } from \"./models\";\r\nimport { createQuestion } from \"apis/questionApis\";\r\nimport { STATIC_CONTENT } from \"configs/constants\";\r\n\r\ntype Props = {\r\n  onCreate: () => void\r\n}\r\n\r\nexport const CreateQuestion = ({ onCreate }: Props) => {\r\n  const [isValid, setIsValid] = useState<boolean>(false);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [questionId, setQuestionId] = useState<string>(\"\");\r\n\r\n  const formRef = useRef<FormRef>(null);\r\n\r\n\r\n  // Add options to language field\r\n  const configs = produce(createQuestionForm, (draft) => {\r\n    draft.fields.map((field: Field) => {\r\n      if (field.name === \"language\") {\r\n        field.options = languages;\r\n      }\r\n      return field;\r\n    });\r\n  })\r\n\r\n\r\n  const addQuestion = () => {\r\n    setLoading(true);\r\n    formRef.current?.handleSubmit(async (data: Question) => {\r\n      try {\r\n        const res = await createQuestion(data);\r\n        setQuestionId(res._id);\r\n\r\n        // Reset form after successful submission\r\n        formRef.current?.reset();\r\n        onCreate();\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-3\">\r\n      {\r\n        questionId && (\r\n          <Alert color=\"success\">\r\n            {`${STATIC_CONTENT.question_created} :\r\n            ${process.env.REACT_APP_EDITOR_BASE_URL}/${questionId}`}\r\n          </Alert>\r\n        )\r\n      }\r\n\r\n      <Form\r\n        configs={configs}\r\n        validationSchemas={CreateQuestionSchema}\r\n        ref={formRef}\r\n        onValidationChange={setIsValid}\r\n      />\r\n\r\n      <div className=\"d-flex justify-content-end mt-5\">\r\n        <Button disabled={!isValid || loading} color={isValid ? \"success\" : \"secondary\"} onClick={addQuestion}>\r\n          {!loading ? \"Create\" : \"Creating...\"}\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreateQuestion;","import React from \"react\"\r\nimport { ButtonProps } from \"reactstrap\";\r\n\r\nimport { deleteQuestion } from \"apis/questionApis\"\r\nimport { ModalComponent } from \"components/Modal\";\r\nimport { STATIC_CONTENT } from \"configs/constants\";\r\nimport { Question } from \"../models\";\r\n\r\ntype Props = {\r\n  row: Question,\r\n  onDelete: () => void\r\n}\r\n\r\nexport const DeleteQuestionAction = ({ row, onDelete }: Props) => {\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  const handleDelete = async () => {\r\n    try {\r\n      setLoading(true);\r\n      row._id && await deleteQuestion(row._id);\r\n      onDelete();\r\n      setIsOpen(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  const footerButtons: ButtonProps[] = [\r\n    {\r\n      text: \"Cancel\",\r\n      color: \"secondary\",\r\n      disabled: loading,\r\n      onClick: () => setIsOpen(false)\r\n    },\r\n    {\r\n      text: !loading ? \"Delete\" : \"Deleting...\",\r\n      color: \"danger\",\r\n      disabled: loading,\r\n      onClick: handleDelete\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <ModalComponent\r\n        isOpen={isOpen}\r\n        size=\"md\"\r\n        centered\r\n        title={STATIC_CONTENT.confirm}\r\n        toggle={() => setIsOpen(prev => !prev)}\r\n        content={<>Are you sure you want to delete this question?</>}\r\n        footerButtons={footerButtons}\r\n      />\r\n\r\n      <div className=\"d-flex align-items-center justify-content-center\">\r\n        <span className=\"text-danger delete-Icon\" onClick={() => setIsOpen(true)}>\r\n          <i className=\"bi bi-trash3-fill\"></i>\r\n        </span>\r\n      </div>\r\n    </>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nimport { getQuestions } from \"apis/questionApis\";\r\nimport questionTableConfigs from \"data/questionsTableConfigs.json\";\r\nimport languages from \"data/languageOptions.json\";\r\nimport { Animate, ModalComponent, TableComponent, Column } from \"components\";\r\nimport { STATIC_CONTENT } from \"configs/constants\";\r\nimport CreateQuestion from \"./CreateQuestion\";\r\nimport { DeleteQuestionAction as DeleteAction } from \"./Actions/DeleteQuestionAction\";\r\nimport { Question } from \"./models\";\r\n\r\nexport const Questions = () => {\r\n  const { columns, configs } = questionTableConfigs\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [refetch, setRefetch] = useState(false)\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const templates = {\r\n    actions: (row: Question) => <DeleteAction row={row} onDelete={() => setRefetch(prev => !prev)} />,\r\n    language: (row: Question) => languages.find(lang => lang.id === +row.language)?.label\r\n  }\r\n\r\n  useEffect(() => {\r\n    // fetch questions\r\n    const fetchQuestions = async () => {\r\n      setLoading(true);\r\n      const res = await getQuestions();\r\n\r\n      setData(res);\r\n      setLoading(false);\r\n    }\r\n\r\n    fetchQuestions();\r\n  }, [refetch]);\r\n\r\n  return (\r\n    <Animate show>\r\n      <ModalComponent\r\n        isOpen={isOpen}\r\n        size=\"lg\"\r\n        toggle={() => setIsOpen(prev => !prev)}\r\n        title={STATIC_CONTENT.create_new_question}\r\n        content={<CreateQuestion onCreate={() => setRefetch(prev => !prev)} />}\r\n      />\r\n\r\n      <div className=\"d-flex flex-row justify-content-between align-items-center mb-3\">\r\n        <h5>{STATIC_CONTENT.all_questions}</h5>\r\n\r\n        <Button color=\"primary\" prefix={\"sas\"} onClick={() => setIsOpen(true)}>\r\n          <i className=\"bi bi-plus\"></i> {STATIC_CONTENT.create_question}\r\n        </Button>\r\n      </div>\r\n\r\n      <TableComponent\r\n        {...{\r\n          columns: columns as Column[],\r\n          configs,\r\n          data,\r\n          templates,\r\n          loading\r\n        }}\r\n      />\r\n    </Animate>\r\n  );\r\n}\r\n\r\nexport default Questions;","import CreateQuestion from \"./Questions\";\r\n\r\nexport * from \"./Questions\";\r\nexport default CreateQuestion;"],"names":["Animate","show","children","animateIn","animateOut","useState","render","setRender","useEffect","className","onAnimationEnd","ModalComponent","isOpen","content","title","footerButtons","toggle","size","centered","keyboard","unmountOnClose","map","button","text","TableBody","data","columns","templates","tdata","index","columnKeys","column","accessor","tdIndex","style","width","minWidth","maxWidth","textAlign","align","grow","flexGrow","TableHead","Header","TableInfo","subtitle","tag","fontSize","TableLoader","color","EmptyMessage","message","TableComponent","configs","loading","rowHover","isInfoAvailable","responsive","borderless","hover","length","noDataMessage","createAPIUrl","endpoint","process","STATIC_CONTENT","all_questions","confirm","create_question","create_new_question","no_questions","submitted_code","question_created","questionEndpoints","apiUrls","getQuestions","getQuestionApi","fetch","response","json","createQuestion","question","description","dueDate","language","createQuestionApi","method","body","JSON","stringify","deleteQuestion","id","deleteQuestionApi","Form","forwardRef","ref","validationSchemas","defaultValues","onInputChange","onValidationChange","fields","formDefaultValues","reduce","acc","input","name","useForm","mode","formState","errors","isValid","control","getValues","handleSubmit","reset","useImperativeHandle","callback","label","type","inputRest","for","required","rules","field","onChange","restControls","innerRef","invalid","valid","e","options","option","value","CreateQuestionSchema","onCreate","setIsValid","setLoading","questionId","setQuestionId","formRef","useRef","produce","createQuestionForm","draft","languages","disabled","onClick","current","res","_id","console","log","DeleteQuestionAction","row","onDelete","React","setIsOpen","handleDelete","Modal","prev","Questions","questionTableConfigs","setData","refetch","setRefetch","actions","lang","fetchQuestions","prefix"],"sourceRoot":""}