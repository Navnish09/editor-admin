{"version":3,"file":"static/js/625.3a4d1ece.chunk.js","mappings":"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","sources":["components/Animate/Animate.tsx","components/Modal/Modal.tsx","components/TableComponent/components/TableBody.tsx","components/TableComponent/components/TableHead.tsx","components/TableComponent/components/TableInfo.tsx","components/TableComponent/TableComponent.tsx","configs/apiConfigs.ts","apis/submissionApis.ts","views/Main/Main.tsx"],"sourcesContent":["import { useEffect, useState, PropsWithChildren } from \"react\";\r\n\r\ntype Props = {\r\n  show: boolean;\r\n  animateIn?: string;\r\n  animateOut?: string;\r\n}\r\n\r\nexport const Animate = ({ show, children, animateIn = \"fadeIn\", animateOut = \"fadeOut\" }: PropsWithChildren<Props>) => {\r\n  const [render, setRender] = useState(false);\r\n\r\n  useEffect(() => {\r\n    show && setRender(show);\r\n  }, [show]);\r\n\r\n  const handleAnimationEnd = () => {\r\n    !show && setRender(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {render && (\r\n        <div className={!show ? animateOut : animateIn} onAnimationEnd={handleAnimationEnd}>\r\n          {children}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};","import React from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { ModalProps } from \"./models\";\r\n\r\nexport const ModalComponent = ({\r\n  isOpen,\r\n  content,\r\n  title,\r\n  footerButtons,\r\n  toggle,\r\n  size = \"md\",\r\n  centered = false\r\n}: ModalProps) => {\r\n  return (\r\n    <div>\r\n      <Modal\r\n        {...{ isOpen, toggle, size, centered }}\r\n        keyboard\r\n        unmountOnClose\r\n        >\r\n        {\r\n          title && (\r\n            <ModalHeader toggle={toggle}>{title}</ModalHeader>\r\n          )\r\n        }\r\n\r\n        <ModalBody>\r\n          {content}\r\n        </ModalBody>\r\n\r\n        {\r\n          footerButtons && (\r\n            <ModalFooter>\r\n              {\r\n                footerButtons?.map((button) => (\r\n                  <Button {...button}>\r\n                    {button.text}\r\n                  </Button>\r\n                ))\r\n              }\r\n            </ModalFooter>\r\n          )\r\n        }\r\n      </Modal>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport { TableProps } from \"../models\";\r\n\r\n// Component for rendering the table body\r\nexport const TableBody = ({ data, columns, templates }: TableProps) => {\r\n  return (\r\n    <tbody>\r\n      {data.map((tdata, index) => {\r\n        const columnKeys = columns.map((column) => column.accessor);\r\n\r\n        return (\r\n          <tr key={index} className=\"border-top\">\r\n            {columnKeys.map((column, tdIndex) => {\r\n\r\n              return (\r\n                <td\r\n                  key={`${tdIndex}-${column}`} className=\"align-middle\"\r\n                  style={{\r\n                    width: columns[tdIndex].width,\r\n                    minWidth : columns[tdIndex].minWidth || \"auto\",\r\n                    maxWidth : columns[tdIndex].maxWidth || \"auto\",\r\n                    textAlign: columns[tdIndex].align || \"left\",\r\n                    ...columns[tdIndex].grow ? { flexGrow: 1 } : {},\r\n                  }}>\r\n                  {\r\n                    // Render the cell content or template,Even empty, if it is available in the columns list\r\n                    (tdata[column] || templates?.[column]) ? (\r\n                      templates?.[column]?.({ ...tdata, index }) || tdata[column]\r\n                    ) : null\r\n                  }\r\n                </td>\r\n              )\r\n            })}\r\n          </tr>\r\n        )\r\n      })}\r\n    </tbody>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport { Column } from \"../models\"\r\n\r\n// Component for rendering the table head\r\nexport const TableHead = ({ columns }: { columns: Column[] }) => {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {columns.map((column, index) => (\r\n          <th\r\n            style={{\r\n              width: column.width || \"auto\",\r\n              textAlign : column.align || \"left\",\r\n              ...column.grow ? { flexGrow: 1 } : {},\r\n            }}\r\n            key={`${index}-${column.accessor}`}\r\n            className=\"border-0 font-medium\">\r\n            {column.Header}\r\n          </th>\r\n        ))}\r\n      </tr>\r\n    </thead>\r\n  )\r\n}","import React from \"react\";\r\nimport { CardSubtitle, CardTitle } from \"reactstrap\"\r\nimport { Info } from \"../models\"\r\n\r\nexport const TableInfo = ({ title, subtitle }: Info) => {\r\n  return (\r\n    <>\r\n      {title && <CardTitle tag=\"h5\">{title}</CardTitle>}\r\n      {\r\n        subtitle && (\r\n          <CardSubtitle className=\"mb-2 text-muted\" style={{fontSize : '0.9rem'}} tag=\"p\">{subtitle}</CardSubtitle>\r\n        )\r\n      }\r\n    </>\r\n  )\r\n}","import { STATIC_CONTENT } from \"configs/constants\";\r\nimport React, { ReactNode } from \"react\";\r\nimport { Card, CardBody, Spinner, Table } from \"reactstrap\";\r\nimport { TableBody, TableHead, TableInfo } from \"./components\";\r\nimport { TableProps } from \"./models\";\r\n\r\nconst TableLoader = () => {\r\n  return (\r\n    <div className=\"d-flex justify-content-center align-items-center\">\r\n      <Spinner color=\"secondary\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EmptyMessage = ({ message }: { message: ReactNode }) => {\r\n  return (\r\n    <div className=\"d-flex justify-content-center align-items-center\">\r\n      <h5>{message}</h5>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const TableComponent = ({ columns, data, templates, configs, loading, rowHover = true }: TableProps) => {\r\n  const isInfoAvailable = configs?.title || configs?.subtitle;\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardBody>\r\n          <TableInfo title={configs?.title || \"\"} subtitle={configs?.subtitle || \"\"} />\r\n\r\n          <Table className={`no-wrap ${isInfoAvailable ? `mt-3` : `mb-0`} align-middle`} responsive borderless hover={rowHover} >\r\n\r\n            {!loading ? (\r\n              <>\r\n                <TableHead columns={columns} />\r\n                {\r\n                  // Render the table body only if the data is available\r\n                  data?.length > 0 && (\r\n                    <TableBody {...{ data, columns, templates, loading }} />\r\n                  )\r\n                }\r\n              </>\r\n            ) : <TableLoader />}\r\n\r\n          </Table>\r\n\r\n        </CardBody>\r\n      </Card>\r\n\r\n      {\r\n        data.length === 0 && !loading && (\r\n          <EmptyMessage message={configs?.noDataMessage} />\r\n        )\r\n      }\r\n    </>\r\n\r\n  );\r\n};\r\n\r\nexport default TableComponent;\r\n","\r\n// Function to build the API URL\r\nexport const createAPIUrl = (endpoint: string) => {\r\n  return `${process.env.REACT_APP_API_DOMAIN}${endpoint}`;\r\n}","import { createAPIUrl } from \"../configs/apiConfigs\";\r\nimport apiUrls from \"../configs/apiRoutes.json\";\r\n\r\nconst submissionEndpoints = apiUrls.submissions;\r\n\r\nexport const getAllSubmissions = async () => {\r\n  const getSubmissionsApi = createAPIUrl(submissionEndpoints.getSubmissions);\r\n  const response = await fetch(getSubmissionsApi);\r\n  return await response.json();\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Row, Col, Button } from \"reactstrap\";\r\n\r\nimport { TableComponent } from \"../../components/TableComponent/TableComponent\";\r\nimport { getAllSubmissions } from \"../../apis/submissionApis\";\r\nimport tableConfigs from \"../../data/submissionTableConfigs.json\";\r\nimport { ModalComponent } from \"../../components/Modal/Modal\";\r\nimport { SubmissionRecord } from \"./models\";\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\r\nimport { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport { Animate } from \"../../components/Animate/Animate\";\r\nimport { STATIC_CONTENT } from \"configs/constants\";\r\n\r\nconst CodeSnippet = ({ code, language }: { code: string, language?: string }) => {\r\n\r\n  return (\r\n    <div style={{ maxHeight: \"80vh\" }}>\r\n      <SyntaxHighlighter\r\n        language={language || \"solidity\"}\r\n        style={oneDark}\r\n        wrapLongLines\r\n      >\r\n        {code}\r\n      </SyntaxHighlighter>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Main = () => {\r\n  const [data, setData] = useState<Array<SubmissionRecord>>([]);\r\n  const [selectedRows, setSelectedRows] = useState<SubmissionRecord>();\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const { configs, columns } = tableConfigs;\r\n\r\n  const handleViewCode = (row: SubmissionRecord) => {\r\n    setIsModalOpen(true);\r\n    setSelectedRows(row)\r\n  };\r\n  /**\r\n   *  Templates for the submission table to attach custom components\r\n   *  */\r\n  const templates = {\r\n    code: (row: SubmissionRecord) => {\r\n      return (\r\n        <Button outline size=\"sm\" onClick={() => handleViewCode(row)}>\r\n          View\r\n        </Button>\r\n      )\r\n    },\r\n    actions: () => \"- - - - - - -\"\r\n  }\r\n\r\n  /**\r\n   * Fetch all submissions from the API\r\n   */\r\n  useEffect(() => {\r\n    !loading && setLoading(true);\r\n\r\n    (async () => {\r\n      try {\r\n        const data = await getAllSubmissions();\r\n        setData(data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <Animate show>\r\n      <ModalComponent\r\n        isOpen={isModalOpen}\r\n        size=\"lg\"\r\n        content={<CodeSnippet code={selectedRows?.code || \"\"} language={selectedRows?.language}  />}\r\n        title={STATIC_CONTENT.submitted_code}\r\n        toggle={() => setIsModalOpen(false)}\r\n      />\r\n\r\n      <Row>\r\n        <Col lg=\"12\">\r\n          <TableComponent\r\n            {...{\r\n              configs,\r\n              columns,\r\n              data,\r\n              templates,\r\n              loading\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Animate>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n"],"names":["Animate","show","children","animateIn","animateOut","useState","render","setRender","useEffect","className","onAnimationEnd","ModalComponent","isOpen","content","title","footerButtons","toggle","size","centered","keyboard","unmountOnClose","map","button","text","TableBody","data","columns","templates","tdata","index","columnKeys","column","accessor","tdIndex","style","width","minWidth","maxWidth","textAlign","align","grow","flexGrow","TableHead","Header","TableInfo","subtitle","tag","fontSize","TableLoader","color","EmptyMessage","message","TableComponent","configs","loading","rowHover","isInfoAvailable","responsive","borderless","hover","length","noDataMessage","createAPIUrl","endpoint","process","submissionEndpoints","apiUrls","getAllSubmissions","getSubmissionsApi","getSubmissions","fetch","response","json","CodeSnippet","code","language","maxHeight","oneDark","wrapLongLines","setData","selectedRows","setSelectedRows","isModalOpen","setIsModalOpen","setLoading","tableConfigs","row","outline","onClick","handleViewCode","actions","console","log","Modal","STATIC_CONTENT","lg"],"sourceRoot":""}